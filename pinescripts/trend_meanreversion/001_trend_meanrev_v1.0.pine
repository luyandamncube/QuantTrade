//@version=5
// ==============================================================================
// Strategy: Trend + Mean Reversion (Sharpe Optimized)
// Author: Luyanda Mncube
// Version: 1.0.0
// Date: 2025-07-20
//
// Description:
// A hybrid trend-following and mean-reversion trading strategy using
// moving averages, Bollinger Bands, and optional filters (RSI, Volatility,
// ADX) for signal refinement. Uses ATR-based position sizing to balance
// risk and smooth equity curve. Includes a rolling Sharpe ratio display
// for on-chart performance monitoring.
//
// Parameters:
// - Fast & Slow MAs define trend direction.
// - Bollinger Bands capture mean-reversion opportunities.
// - Optional filters limit trades to favorable regimes.
// - ATR-based position sizing scales exposure dynamically.
// - Risk % per trade defaults to 1.5%, adjustable.
//
// Notes:
// - Toggle shorts, filters, and sensitivity for optimization.
// - Designed for medium-term swing trading on liquid assets (ETFs, stocks).
// ==============================================================================

strategy("Trend + Mean Reversion (Sharpe Optimized)", overlay=true,
     initial_capital=100000, commission_type=strategy.commission.percent, commission_value=0.05)

// === INPUT PARAMETERS ===
fastLen    = input.int(20, "Fast MA Length", minval=1)                         // 10–30
slowLen    = input.int(50, "Slow MA Length", minval=1)                         // 30-100
bbLen      = input.int(20, "Bollinger Band Length", minval=1)                  // 10–30
bbStd      = input.float(2.0, "Bollinger Band Std Dev", minval=0.1, step=0.1)  // 1.5–1.8

// Risk & position sizing
riskPct    = input.float(1.5, "Risk % per Trade", step=0.1) / 100              // 0.5%–2%
atrLen     = input.int(14, "ATR Length")
atrMult    = input.float(1.2, "ATR Stop Multiplier")                           // 1.5–1.8

// Toggle switches
enableShorts   = input.bool(false, "Enable Shorts?")
useADXFilter   = input.bool(true, "Filter Shorts by ADX?")
adxLen         = input.int(14, "ADX Length")
minADX         = input.float(15, "Min ADX for Shorts")

useRSIFilter   = input.bool(false, "Filter Entries by RSI?")
rsiLen         = input.int(14, "RSI Length")
rsiMin         = input.float(40, "RSI Min")
rsiMax         = input.float(60, "RSI Max")

useVolFilter   = input.bool(true, "Filter by Volatility Regime?")
minVolWidth    = input.float(0.01, "Min Bollinger Band Width")

// Sharpe settings
windowBars = input.int(200, "Sharpe Lookback Bars", minval=50)

// === TREND & MEAN-REVERSION SIGNALS ===
fastMA = ta.sma(close, fastLen)
slowMA = ta.sma(close, slowLen)
trendLong  = fastMA > slowMA
trendShort = fastMA < slowMA

basis = ta.sma(close, bbLen)
dev   = ta.stdev(close, bbLen)
upper = basis + bbStd * dev
lower = basis - bbStd * dev

meanRevLong  = close < lower
meanRevShort = close > upper

// Combine signals (+1 long, -1 short, 0 flat)
signal = 0
signal := (trendLong or meanRevLong) ? 1 : (trendShort or meanRevShort ? -1 : 0)

// === FILTERS ===
rsi = ta.rsi(close, rsiLen)
volWidth = (upper - lower) / basis
[plusDI, minusDI, adxVal] = ta.dmi(adxLen, adxLen)  // Corrected function call

entryAllowed = true
if useRSIFilter
    entryAllowed := (rsi > rsiMin and rsi < rsiMax)
if useVolFilter
    entryAllowed := entryAllowed and (volWidth > minVolWidth)

// === ATR-BASED POSITION SIZING ===
atr = ta.atr(atrLen)
posSize = (strategy.equity * riskPct) / (atr * atrMult)

// === STRATEGY EXECUTION ===
if (signal == 1 and entryAllowed)
    strategy.entry("Long", strategy.long, qty=posSize)
if (signal == -1 and enableShorts and entryAllowed and (not useADXFilter or adxVal > minADX))
    strategy.entry("Short", strategy.short, qty=posSize)
if (signal == 0)
    strategy.close_all()

// === VISUALIZATION ===
plot(fastMA, color=color.new(color.teal, 0), title="Fast MA")
plot(slowMA, color=color.new(color.orange, 0), title="Slow MA")
plot(upper, "Upper BB", color=color.new(color.red, 60))
plot(lower, "Lower BB", color=color.new(color.green, 60))
hline(0, "Zero Line", color=color.gray)

// === ROLLING SHARPE RATIO ===
equity = strategy.equity
ret = nz(equity / equity[1] - 1, 0)
ret_avg = ta.sma(ret, windowBars)
ret_std = ta.stdev(ret, windowBars)

annual_factor = math.sqrt(252)
sharpe = (ret_std != 0) ? (ret_avg / ret_std) * annual_factor : na

var label sharpe_label = na
if barstate.islast
    label.delete(sharpe_label)
    sharpe_label := label.new(bar_index, high,
        text="Sharpe Ratio: " + str.tostring(sharpe, "#.##"),
        style=label.style_label_down,
        color=color.new(color.blue, 70))